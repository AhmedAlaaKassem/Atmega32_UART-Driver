
UART_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001c6c  00001d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  00001d0a  2**0
                  ALLOC
  3 .stab         00001908  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c4a  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000425e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000439e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000450e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006157  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000081dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000089ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 0c 	call	0x1962	; 0x1962 <main>
      8a:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_INIT_Pin>:
/* Description! Interface to Set the direction of PIN                                  */
/* Input      ! Pin number, Desired Direction                            			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_INIT_Pin(uint8_t au8_PinNumberCpy, uint8_t au8_DirectionCpy)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_INIT_Pin+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_INIT_Pin+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DIO_INIT_Pin+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8b 83       	std	Y+3, r24	; 0x03
     b56:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Error = ERROR_NOK;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7)&&(au8_DirectionCpy >= INPUT_PIN)&&(au8_DirectionCpy <= OUTPUT_PIN) )
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	80 32       	cpi	r24, 0x20	; 32
     b60:	08 f0       	brcs	.+2      	; 0xb64 <DIO_INIT_Pin+0x1e>
     b62:	d6 c0       	rjmp	.+428    	; 0xd10 <DIO_INIT_Pin+0x1ca>
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	08 f0       	brcs	.+2      	; 0xb6c <DIO_INIT_Pin+0x26>
     b6a:	d2 c0       	rjmp	.+420    	; 0xd10 <DIO_INIT_Pin+0x1ca>
	{
		Error = ERROR_OK;
     b6c:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	86 95       	lsr	r24
     b72:	86 95       	lsr	r24
     b74:	86 95       	lsr	r24
     b76:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	87 70       	andi	r24, 0x07	; 7
     b7c:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	3e 83       	std	Y+6, r19	; 0x06
     b86:	2d 83       	std	Y+5, r18	; 0x05
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	91 05       	cpc	r25, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <DIO_INIT_Pin+0x4e>
     b92:	41 c0       	rjmp	.+130    	; 0xc16 <DIO_INIT_Pin+0xd0>
     b94:	2d 81       	ldd	r18, Y+5	; 0x05
     b96:	3e 81       	ldd	r19, Y+6	; 0x06
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	2c f4       	brge	.+10     	; 0xba8 <DIO_INIT_Pin+0x62>
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	71 f0       	breq	.+28     	; 0xbc2 <DIO_INIT_Pin+0x7c>
     ba6:	b4 c0       	rjmp	.+360    	; 0xd10 <DIO_INIT_Pin+0x1ca>
     ba8:	2d 81       	ldd	r18, Y+5	; 0x05
     baa:	3e 81       	ldd	r19, Y+6	; 0x06
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <DIO_INIT_Pin+0x6e>
     bb2:	5b c0       	rjmp	.+182    	; 0xc6a <DIO_INIT_Pin+0x124>
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	9e 81       	ldd	r25, Y+6	; 0x06
     bb8:	83 30       	cpi	r24, 0x03	; 3
     bba:	91 05       	cpc	r25, r1
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <DIO_INIT_Pin+0x7a>
     bbe:	7f c0       	rjmp	.+254    	; 0xcbe <DIO_INIT_Pin+0x178>
     bc0:	a7 c0       	rjmp	.+334    	; 0xd10 <DIO_INIT_Pin+0x1ca>
		{
			case DIO_PORTA:
				if(au8_DirectionCpy==OUTPUT_PIN)
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	99 f4       	brne	.+38     	; 0xbee <DIO_INIT_Pin+0xa8>
				{
					SET_BIT(DDRA,au8_PinNumberCpy);
     bc8:	aa e3       	ldi	r26, 0x3A	; 58
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea e3       	ldi	r30, 0x3A	; 58
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	40 81       	ld	r20, Z
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_INIT_Pin+0x9e>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_INIT_Pin+0x9a>
     be8:	84 2b       	or	r24, r20
     bea:	8c 93       	st	X, r24
     bec:	91 c0       	rjmp	.+290    	; 0xd10 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRA,au8_PinNumberCpy);
     bee:	aa e3       	ldi	r26, 0x3A	; 58
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	ea e3       	ldi	r30, 0x3A	; 58
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	40 81       	ld	r20, Z
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_INIT_Pin+0xc4>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_INIT_Pin+0xc0>
     c0e:	80 95       	com	r24
     c10:	84 23       	and	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	7d c0       	rjmp	.+250    	; 0xd10 <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTB:
				if(au8_DirectionCpy==OUTPUT_PIN)
     c16:	8c 81       	ldd	r24, Y+4	; 0x04
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	99 f4       	brne	.+38     	; 0xc42 <DIO_INIT_Pin+0xfc>
				{
					SET_BIT(DDRB,au8_PinNumberCpy);
     c1c:	a7 e3       	ldi	r26, 0x37	; 55
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e7 e3       	ldi	r30, 0x37	; 55
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	40 81       	ld	r20, Z
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 2e       	mov	r0, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_INIT_Pin+0xf2>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_INIT_Pin+0xee>
     c3c:	84 2b       	or	r24, r20
     c3e:	8c 93       	st	X, r24
     c40:	67 c0       	rjmp	.+206    	; 0xd10 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRB,au8_PinNumberCpy);
     c42:	a7 e3       	ldi	r26, 0x37	; 55
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e3       	ldi	r30, 0x37	; 55
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	40 81       	ld	r20, Z
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_INIT_Pin+0x118>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_INIT_Pin+0x114>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	53 c0       	rjmp	.+166    	; 0xd10 <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTC:
				if(au8_DirectionCpy==OUTPUT_PIN)
     c6a:	8c 81       	ldd	r24, Y+4	; 0x04
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	99 f4       	brne	.+38     	; 0xc96 <DIO_INIT_Pin+0x150>
				{
					SET_BIT(DDRC,au8_PinNumberCpy);
     c70:	a4 e3       	ldi	r26, 0x34	; 52
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e4 e3       	ldi	r30, 0x34	; 52
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	40 81       	ld	r20, Z
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_INIT_Pin+0x146>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_INIT_Pin+0x142>
     c90:	84 2b       	or	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	3d c0       	rjmp	.+122    	; 0xd10 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRC,au8_PinNumberCpy);
     c96:	a4 e3       	ldi	r26, 0x34	; 52
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e4 e3       	ldi	r30, 0x34	; 52
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	40 81       	ld	r20, Z
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 2e       	mov	r0, r18
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <DIO_INIT_Pin+0x16c>
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	0a 94       	dec	r0
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <DIO_INIT_Pin+0x168>
     cb6:	80 95       	com	r24
     cb8:	84 23       	and	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	29 c0       	rjmp	.+82     	; 0xd10 <DIO_INIT_Pin+0x1ca>
				}
			break;

			case DIO_PORTD:
				if(au8_DirectionCpy==OUTPUT_PIN)
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	99 f4       	brne	.+38     	; 0xcea <DIO_INIT_Pin+0x1a4>
				{
					SET_BIT(DDRD,au8_PinNumberCpy);
     cc4:	a1 e3       	ldi	r26, 0x31	; 49
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e3       	ldi	r30, 0x31	; 49
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	40 81       	ld	r20, Z
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_INIT_Pin+0x19a>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_INIT_Pin+0x196>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	13 c0       	rjmp	.+38     	; 0xd10 <DIO_INIT_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(DDRD,au8_PinNumberCpy);
     cea:	a1 e3       	ldi	r26, 0x31	; 49
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e1 e3       	ldi	r30, 0x31	; 49
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	40 81       	ld	r20, Z
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 2e       	mov	r0, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_INIT_Pin+0x1c0>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	0a 94       	dec	r0
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_INIT_Pin+0x1bc>
     d0a:	80 95       	com	r24
     d0c:	84 23       	and	r24, r20
     d0e:	8c 93       	st	X, r24
				}
			break;
		}
	}
	return Error;
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d12:	26 96       	adiw	r28, 0x06	; 6
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <DIO_INIT_Port>:
/* Description! Interface to set port direction                                        */
/* Input      ! Port number , Desired Direction                                        */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_INIT_Port(uint8_t au8_PortNumberCpy,uint8_t au8_ValueCpy)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <DIO_INIT_Port+0x6>
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <DIO_INIT_Port+0x8>
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	8a 83       	std	Y+2, r24	; 0x02
     d34:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA)&&(au8_PortNumberCpy <= DIO_PORTD)&&(au8_ValueCpy >= INPUT_PORT)&&(au8_ValueCpy <= OUTPUT_PORT) )
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	98 f5       	brcc	.+102    	; 0xda6 <DIO_INIT_Port+0x82>
	{
		Error = ERROR_OK;
     d40:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	3d 83       	std	Y+5, r19	; 0x05
     d4a:	2c 83       	std	Y+4, r18	; 0x04
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	9d 81       	ldd	r25, Y+5	; 0x05
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	91 05       	cpc	r25, r1
     d54:	d1 f0       	breq	.+52     	; 0xd8a <DIO_INIT_Port+0x66>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <DIO_INIT_Port+0x46>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	61 f0       	breq	.+24     	; 0xd80 <DIO_INIT_Port+0x5c>
     d68:	1e c0       	rjmp	.+60     	; 0xda6 <DIO_INIT_Port+0x82>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	81 f0       	breq	.+32     	; 0xd94 <DIO_INIT_Port+0x70>
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	81 f0       	breq	.+32     	; 0xd9e <DIO_INIT_Port+0x7a>
     d7e:	13 c0       	rjmp	.+38     	; 0xda6 <DIO_INIT_Port+0x82>
		{
			case DIO_PORTA:

				DDRA = au8_ValueCpy;
     d80:	ea e3       	ldi	r30, 0x3A	; 58
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	80 83       	st	Z, r24
     d88:	0e c0       	rjmp	.+28     	; 0xda6 <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTB:

				DDRB = au8_ValueCpy;
     d8a:	e7 e3       	ldi	r30, 0x37	; 55
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	80 83       	st	Z, r24
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTC:

				DDRC = au8_ValueCpy;
     d94:	e4 e3       	ldi	r30, 0x34	; 52
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	80 83       	st	Z, r24
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <DIO_INIT_Port+0x82>
			break;

			case DIO_PORTD:

				DDRD = au8_ValueCpy;
     d9e:	e1 e3       	ldi	r30, 0x31	; 49
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	80 83       	st	Z, r24
			break;
		}
	}
	return Error;
     da6:	89 81       	ldd	r24, Y+1	; 0x01
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <DIO_Write_Pin>:
/* Description! Interface to set the Output value of the pin                           */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Write_Pin(uint8_t au8_PinNumberCpy,uint8_t au8_ValueCpy)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <DIO_Write_Pin+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <DIO_Write_Pin+0x8>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <DIO_Write_Pin+0xa>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	8b 83       	std	Y+3, r24	; 0x03
     dc8:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t Error = ERROR_NOK;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7)&&(au8_ValueCpy >= LOW_PIN)&&(au8_ValueCpy <= HIGH_PIN) )
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 32       	cpi	r24, 0x20	; 32
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <DIO_Write_Pin+0x1e>
     dd4:	d6 c0       	rjmp	.+428    	; 0xf82 <DIO_Write_Pin+0x1ca>
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	08 f0       	brcs	.+2      	; 0xdde <DIO_Write_Pin+0x26>
     ddc:	d2 c0       	rjmp	.+420    	; 0xf82 <DIO_Write_Pin+0x1ca>
	{
		Error = ERROR_OK;
     dde:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	86 95       	lsr	r24
     de4:	86 95       	lsr	r24
     de6:	86 95       	lsr	r24
     de8:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	87 70       	andi	r24, 0x07	; 7
     dee:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	3e 83       	std	Y+6, r19	; 0x06
     df8:	2d 83       	std	Y+5, r18	; 0x05
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 05       	cpc	r25, r1
     e02:	09 f4       	brne	.+2      	; 0xe06 <DIO_Write_Pin+0x4e>
     e04:	41 c0       	rjmp	.+130    	; 0xe88 <DIO_Write_Pin+0xd0>
     e06:	2d 81       	ldd	r18, Y+5	; 0x05
     e08:	3e 81       	ldd	r19, Y+6	; 0x06
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	2c f4       	brge	.+10     	; 0xe1a <DIO_Write_Pin+0x62>
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	71 f0       	breq	.+28     	; 0xe34 <DIO_Write_Pin+0x7c>
     e18:	b4 c0       	rjmp	.+360    	; 0xf82 <DIO_Write_Pin+0x1ca>
     e1a:	2d 81       	ldd	r18, Y+5	; 0x05
     e1c:	3e 81       	ldd	r19, Y+6	; 0x06
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <DIO_Write_Pin+0x6e>
     e24:	5b c0       	rjmp	.+182    	; 0xedc <DIO_Write_Pin+0x124>
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	9e 81       	ldd	r25, Y+6	; 0x06
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	91 05       	cpc	r25, r1
     e2e:	09 f4       	brne	.+2      	; 0xe32 <DIO_Write_Pin+0x7a>
     e30:	7f c0       	rjmp	.+254    	; 0xf30 <DIO_Write_Pin+0x178>
     e32:	a7 c0       	rjmp	.+334    	; 0xf82 <DIO_Write_Pin+0x1ca>
		{
			case DIO_PORTA:
				if(au8_ValueCpy==HIGH_PIN)
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	99 f4       	brne	.+38     	; 0xe60 <DIO_Write_Pin+0xa8>
				{
					SET_BIT(PORTA,au8_PinNumberCpy);
     e3a:	ab e3       	ldi	r26, 0x3B	; 59
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e3       	ldi	r30, 0x3B	; 59
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	40 81       	ld	r20, Z
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_Write_Pin+0x9e>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_Write_Pin+0x9a>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	91 c0       	rjmp	.+290    	; 0xf82 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTA,au8_PinNumberCpy);
     e60:	ab e3       	ldi	r26, 0x3B	; 59
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e3       	ldi	r30, 0x3B	; 59
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	40 81       	ld	r20, Z
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_Write_Pin+0xc4>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_Write_Pin+0xc0>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	7d c0       	rjmp	.+250    	; 0xf82 <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTB:
				if(au8_ValueCpy==HIGH_PIN)
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	99 f4       	brne	.+38     	; 0xeb4 <DIO_Write_Pin+0xfc>
				{
					SET_BIT(PORTB,au8_PinNumberCpy);
     e8e:	a8 e3       	ldi	r26, 0x38	; 56
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e8 e3       	ldi	r30, 0x38	; 56
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	40 81       	ld	r20, Z
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_Write_Pin+0xf2>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_Write_Pin+0xee>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	67 c0       	rjmp	.+206    	; 0xf82 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTB,au8_PinNumberCpy);
     eb4:	a8 e3       	ldi	r26, 0x38	; 56
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e8 e3       	ldi	r30, 0x38	; 56
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	40 81       	ld	r20, Z
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_Write_Pin+0x118>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_Write_Pin+0x114>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	53 c0       	rjmp	.+166    	; 0xf82 <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTC:
				if(au8_ValueCpy==HIGH_PIN)
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	99 f4       	brne	.+38     	; 0xf08 <DIO_Write_Pin+0x150>
				{
					SET_BIT(PORTC,au8_PinNumberCpy);
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	40 81       	ld	r20, Z
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_Write_Pin+0x146>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_Write_Pin+0x142>
     f02:	84 2b       	or	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	3d c0       	rjmp	.+122    	; 0xf82 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTC,au8_PinNumberCpy);
     f08:	a5 e3       	ldi	r26, 0x35	; 53
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e5 e3       	ldi	r30, 0x35	; 53
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	40 81       	ld	r20, Z
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_Write_Pin+0x16c>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_Write_Pin+0x168>
     f28:	80 95       	com	r24
     f2a:	84 23       	and	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	29 c0       	rjmp	.+82     	; 0xf82 <DIO_Write_Pin+0x1ca>
				}
				break;
			case DIO_PORTD:
				if(au8_ValueCpy==HIGH_PIN)
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	99 f4       	brne	.+38     	; 0xf5c <DIO_Write_Pin+0x1a4>
				{
					SET_BIT(PORTD,au8_PinNumberCpy);
     f36:	a2 e3       	ldi	r26, 0x32	; 50
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e2 e3       	ldi	r30, 0x32	; 50
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	40 81       	ld	r20, Z
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_Write_Pin+0x19a>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_Write_Pin+0x196>
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	13 c0       	rjmp	.+38     	; 0xf82 <DIO_Write_Pin+0x1ca>
				}
				else
				{
					CLEAR_BIT(PORTD,au8_PinNumberCpy);
     f5c:	a2 e3       	ldi	r26, 0x32	; 50
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e2 e3       	ldi	r30, 0x32	; 50
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	40 81       	ld	r20, Z
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_Write_Pin+0x1c0>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_Write_Pin+0x1bc>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
				}
				break;
		}
	}
	return Error;
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f84:	26 96       	adiw	r28, 0x06	; 6
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <DIO_Write_Port>:
/* Description! Interface to set the output value of port                              */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Write_Port(uint8_t au8_PortNumberCpy,uint8_t au8_ValueCpy)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <DIO_Write_Port+0x6>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <DIO_Write_Port+0x8>
     f9e:	0f 92       	push	r0
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	8a 83       	std	Y+2, r24	; 0x02
     fa6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD)&&(au8_ValueCpy >= LOW_PORT)&&(au8_ValueCpy <= HIGH_PORT) )
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	98 f5       	brcc	.+102    	; 0x1018 <DIO_Write_Port+0x82>
	{
		Error = ERROR_OK;
     fb2:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	3d 83       	std	Y+5, r19	; 0x05
     fbc:	2c 83       	std	Y+4, r18	; 0x04
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	9d 81       	ldd	r25, Y+5	; 0x05
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	91 05       	cpc	r25, r1
     fc6:	d1 f0       	breq	.+52     	; 0xffc <DIO_Write_Port+0x66>
     fc8:	2c 81       	ldd	r18, Y+4	; 0x04
     fca:	3d 81       	ldd	r19, Y+5	; 0x05
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	31 05       	cpc	r19, r1
     fd0:	2c f4       	brge	.+10     	; 0xfdc <DIO_Write_Port+0x46>
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	61 f0       	breq	.+24     	; 0xff2 <DIO_Write_Port+0x5c>
     fda:	1e c0       	rjmp	.+60     	; 0x1018 <DIO_Write_Port+0x82>
     fdc:	2c 81       	ldd	r18, Y+4	; 0x04
     fde:	3d 81       	ldd	r19, Y+5	; 0x05
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	81 f0       	breq	.+32     	; 0x1006 <DIO_Write_Port+0x70>
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	91 05       	cpc	r25, r1
     fee:	81 f0       	breq	.+32     	; 0x1010 <DIO_Write_Port+0x7a>
     ff0:	13 c0       	rjmp	.+38     	; 0x1018 <DIO_Write_Port+0x82>
		{
			case DIO_PORTA:

				PORTA = au8_ValueCpy; // 3shan ana bn2l data msh bs 0 aw 1
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	80 83       	st	Z, r24
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <DIO_Write_Port+0x82>
				break;

			case DIO_PORTB:

				PORTB = au8_ValueCpy;
     ffc:	e8 e3       	ldi	r30, 0x38	; 56
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	80 83       	st	Z, r24
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <DIO_Write_Port+0x82>
				break;

			case DIO_PORTC:

				PORTC = au8_ValueCpy;
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	80 83       	st	Z, r24
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <DIO_Write_Port+0x82>
				break;

			case DIO_PORTD:

				PORTD = au8_ValueCpy;
    1010:	e2 e3       	ldi	r30, 0x32	; 50
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <DIO_Read_Pin>:
/* Description! Interface to read an input digital pin                                 */
/* Input      ! Pin number                                               			   */
/* Output     ! uint8 contains the Pin value                                           */
/***************************************************************************************/
uint8_t DIO_Read_Pin(uint8_t au8_PinNumberCpy, uint8_t * pu8_PinValueCpy)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	27 97       	sbiw	r28, 0x07	; 7
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	7d 83       	std	Y+5, r23	; 0x05
    1042:	6c 83       	std	Y+4, r22	; 0x04

	uint8_t Error = ERROR_NOK;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	80 32       	cpi	r24, 0x20	; 32
    104c:	08 f0       	brcs	.+2      	; 0x1050 <DIO_Read_Pin+0x26>
    104e:	79 c0       	rjmp	.+242    	; 0x1142 <DIO_Read_Pin+0x118>
	{
		Error = ERROR_OK;
    1050:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	86 95       	lsr	r24
    1056:	86 95       	lsr	r24
    1058:	86 95       	lsr	r24
    105a:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	87 70       	andi	r24, 0x07	; 7
    1060:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3f 83       	std	Y+7, r19	; 0x07
    106a:	2e 83       	std	Y+6, r18	; 0x06
    106c:	4e 81       	ldd	r20, Y+6	; 0x06
    106e:	5f 81       	ldd	r21, Y+7	; 0x07
    1070:	41 30       	cpi	r20, 0x01	; 1
    1072:	51 05       	cpc	r21, r1
    1074:	59 f1       	breq	.+86     	; 0x10cc <DIO_Read_Pin+0xa2>
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	91 05       	cpc	r25, r1
    107e:	34 f4       	brge	.+12     	; 0x108c <DIO_Read_Pin+0x62>
    1080:	2e 81       	ldd	r18, Y+6	; 0x06
    1082:	3f 81       	ldd	r19, Y+7	; 0x07
    1084:	21 15       	cp	r18, r1
    1086:	31 05       	cpc	r19, r1
    1088:	69 f0       	breq	.+26     	; 0x10a4 <DIO_Read_Pin+0x7a>
    108a:	5b c0       	rjmp	.+182    	; 0x1142 <DIO_Read_Pin+0x118>
    108c:	4e 81       	ldd	r20, Y+6	; 0x06
    108e:	5f 81       	ldd	r21, Y+7	; 0x07
    1090:	42 30       	cpi	r20, 0x02	; 2
    1092:	51 05       	cpc	r21, r1
    1094:	79 f1       	breq	.+94     	; 0x10f4 <DIO_Read_Pin+0xca>
    1096:	8e 81       	ldd	r24, Y+6	; 0x06
    1098:	9f 81       	ldd	r25, Y+7	; 0x07
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <DIO_Read_Pin+0x78>
    10a0:	3d c0       	rjmp	.+122    	; 0x111c <DIO_Read_Pin+0xf2>
    10a2:	4f c0       	rjmp	.+158    	; 0x1142 <DIO_Read_Pin+0x118>
		{
			case DIO_PORTA:

				*pu8_PinValueCpy = GET_BIT(PINA,au8_PinNumberCpy);
    10a4:	e9 e3       	ldi	r30, 0x39	; 57
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a9 01       	movw	r20, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_Read_Pin+0x92>
    10b8:	55 95       	asr	r21
    10ba:	47 95       	ror	r20
    10bc:	8a 95       	dec	r24
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_Read_Pin+0x8e>
    10c0:	ca 01       	movw	r24, r20
    10c2:	81 70       	andi	r24, 0x01	; 1
    10c4:	ec 81       	ldd	r30, Y+4	; 0x04
    10c6:	fd 81       	ldd	r31, Y+5	; 0x05
    10c8:	80 83       	st	Z, r24
    10ca:	3b c0       	rjmp	.+118    	; 0x1142 <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTB:

				*pu8_PinValueCpy = GET_BIT(PINB,au8_PinNumberCpy);
    10cc:	e6 e3       	ldi	r30, 0x36	; 54
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_Read_Pin+0xba>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_Read_Pin+0xb6>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	ec 81       	ldd	r30, Y+4	; 0x04
    10ee:	fd 81       	ldd	r31, Y+5	; 0x05
    10f0:	80 83       	st	Z, r24
    10f2:	27 c0       	rjmp	.+78     	; 0x1142 <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTC:

				*pu8_PinValueCpy = GET_BIT(PINC,au8_PinNumberCpy);
    10f4:	e3 e3       	ldi	r30, 0x33	; 51
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_Read_Pin+0xe2>
    1108:	55 95       	asr	r21
    110a:	47 95       	ror	r20
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_Read_Pin+0xde>
    1110:	ca 01       	movw	r24, r20
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	ec 81       	ldd	r30, Y+4	; 0x04
    1116:	fd 81       	ldd	r31, Y+5	; 0x05
    1118:	80 83       	st	Z, r24
    111a:	13 c0       	rjmp	.+38     	; 0x1142 <DIO_Read_Pin+0x118>
				break;
			case DIO_PORTD:

				*pu8_PinValueCpy = GET_BIT(PIND,au8_PinNumberCpy);
    111c:	e0 e3       	ldi	r30, 0x30	; 48
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_Read_Pin+0x10a>
    1130:	55 95       	asr	r21
    1132:	47 95       	ror	r20
    1134:	8a 95       	dec	r24
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_Read_Pin+0x106>
    1138:	ca 01       	movw	r24, r20
    113a:	81 70       	andi	r24, 0x01	; 1
    113c:	ec 81       	ldd	r30, Y+4	; 0x04
    113e:	fd 81       	ldd	r31, Y+5	; 0x05
    1140:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1144:	27 96       	adiw	r28, 0x07	; 7
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DIO_Read_Port>:
/* Description! Interface to get the input value on Port                               */
/* Input      ! Port number                                                            */
/* Output     ! Port Value                                                             */
/***************************************************************************************/
uint8_t DIO_Read_Port(uint8_t au8_PortNumberCpy, uint8_t * pu8_PortValueCpy)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_Read_Port+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_Read_Port+0x8>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_Read_Port+0xa>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	7c 83       	std	Y+4, r23	; 0x04
    1168:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Error = ERROR_NOK;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
	if( (au8_PortNumberCpy >= DIO_PORTA)&&(au8_PortNumberCpy <= DIO_PORTD) )
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	d8 f5       	brcc	.+118    	; 0x11ea <DIO_Read_Port+0x94>
	{
		Error = ERROR_OK;
    1174:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3e 83       	std	Y+6, r19	; 0x06
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	e1 f0       	breq	.+56     	; 0x11c2 <DIO_Read_Port+0x6c>
    118a:	2d 81       	ldd	r18, Y+5	; 0x05
    118c:	3e 81       	ldd	r19, Y+6	; 0x06
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	2c f4       	brge	.+10     	; 0x119e <DIO_Read_Port+0x48>
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	61 f0       	breq	.+24     	; 0x11b4 <DIO_Read_Port+0x5e>
    119c:	26 c0       	rjmp	.+76     	; 0x11ea <DIO_Read_Port+0x94>
    119e:	2d 81       	ldd	r18, Y+5	; 0x05
    11a0:	3e 81       	ldd	r19, Y+6	; 0x06
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	a1 f0       	breq	.+40     	; 0x11d0 <DIO_Read_Port+0x7a>
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	91 05       	cpc	r25, r1
    11b0:	b1 f0       	breq	.+44     	; 0x11de <DIO_Read_Port+0x88>
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <DIO_Read_Port+0x94>
		{
			case DIO_PORTA:

				*pu8_PortValueCpy = PINA;
    11b4:	e9 e3       	ldi	r30, 0x39	; 57
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	eb 81       	ldd	r30, Y+3	; 0x03
    11bc:	fc 81       	ldd	r31, Y+4	; 0x04
    11be:	80 83       	st	Z, r24
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <DIO_Read_Port+0x94>
			break;
			case DIO_PORTB:
				*pu8_PortValueCpy = PINB;
    11c2:	e6 e3       	ldi	r30, 0x36	; 54
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	eb 81       	ldd	r30, Y+3	; 0x03
    11ca:	fc 81       	ldd	r31, Y+4	; 0x04
    11cc:	80 83       	st	Z, r24
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <DIO_Read_Port+0x94>
			break;
			case DIO_PORTC:
				*pu8_PortValueCpy = PINC;
    11d0:	e3 e3       	ldi	r30, 0x33	; 51
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	eb 81       	ldd	r30, Y+3	; 0x03
    11d8:	fc 81       	ldd	r31, Y+4	; 0x04
    11da:	80 83       	st	Z, r24
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <DIO_Read_Port+0x94>
			break;
			case DIO_PORTD:
				*pu8_PortValueCpy = PIND;
    11de:	e0 e3       	ldi	r30, 0x30	; 48
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	eb 81       	ldd	r30, Y+3	; 0x03
    11e6:	fc 81       	ldd	r31, Y+4	; 0x04
    11e8:	80 83       	st	Z, r24
			break;
		}
	}
	return Error;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	26 96       	adiw	r28, 0x06	; 6
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DIO_Pullup_Pin>:
/* Description! Interface to make pin Pullup                                           */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Pullup_Pin(uint8_t au8_PinNumberCpy)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <DIO_Pullup_Pin+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <DIO_Pullup_Pin+0x8>
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Error = ERROR_NOK;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	80 32       	cpi	r24, 0x20	; 32
    1216:	08 f0       	brcs	.+2      	; 0x121a <DIO_Pullup_Pin+0x1c>
    1218:	74 c0       	rjmp	.+232    	; 0x1302 <DIO_Pullup_Pin+0x104>
	{
		Error = ERROR_OK;
    121a:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	86 95       	lsr	r24
    1220:	86 95       	lsr	r24
    1222:	86 95       	lsr	r24
    1224:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	87 70       	andi	r24, 0x07	; 7
    122a:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	3d 83       	std	Y+5, r19	; 0x05
    1234:	2c 83       	std	Y+4, r18	; 0x04
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	91 05       	cpc	r25, r1
    123e:	49 f1       	breq	.+82     	; 0x1292 <DIO_Pullup_Pin+0x94>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	2c f4       	brge	.+10     	; 0x1254 <DIO_Pullup_Pin+0x56>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	61 f0       	breq	.+24     	; 0x126a <DIO_Pullup_Pin+0x6c>
    1252:	57 c0       	rjmp	.+174    	; 0x1302 <DIO_Pullup_Pin+0x104>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	69 f1       	breq	.+90     	; 0x12b8 <DIO_Pullup_Pin+0xba>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	d9 f1       	breq	.+118    	; 0x12de <DIO_Pullup_Pin+0xe0>
    1268:	4c c0       	rjmp	.+152    	; 0x1302 <DIO_Pullup_Pin+0x104>
		{
			case DIO_PORTA:

				CLEAR_BIT(PORTA,au8_PinNumberCpy);
    126a:	ab e3       	ldi	r26, 0x3B	; 59
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	40 81       	ld	r20, Z
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_Pullup_Pin+0x88>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_Pullup_Pin+0x84>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	38 c0       	rjmp	.+112    	; 0x1302 <DIO_Pullup_Pin+0x104>
				break;
			case DIO_PORTB:

				SET_BIT(PORTB,au8_PinNumberCpy);
    1292:	a8 e3       	ldi	r26, 0x38	; 56
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	40 81       	ld	r20, Z
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_Pullup_Pin+0xb0>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_Pullup_Pin+0xac>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	25 c0       	rjmp	.+74     	; 0x1302 <DIO_Pullup_Pin+0x104>
				break;
			case DIO_PORTC:

				SET_BIT(PORTC,au8_PinNumberCpy);
    12b8:	a5 e3       	ldi	r26, 0x35	; 53
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e3       	ldi	r30, 0x35	; 53
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	40 81       	ld	r20, Z
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_Pullup_Pin+0xd6>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_Pullup_Pin+0xd2>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	12 c0       	rjmp	.+36     	; 0x1302 <DIO_Pullup_Pin+0x104>
				break;
			case DIO_PORTD:

				SET_BIT(PORTD,au8_PinNumberCpy);
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	40 81       	ld	r20, Z
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_Pullup_Pin+0xfc>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_Pullup_Pin+0xf8>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <DIO_Pullup_Port>:
/* Description! Interface to make port Pullup                                          */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Pullup_Port(uint8_t au8_PortNumberCpy)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_Pullup_Port+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_Pullup_Port+0x8>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Error = ERROR_NOK;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD) )
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	98 f5       	brcc	.+102    	; 0x1392 <DIO_Pullup_Port+0x7e>
	{
		Error = ERROR_OK;
    132c:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3c 83       	std	Y+4, r19	; 0x04
    1336:	2b 83       	std	Y+3, r18	; 0x03
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	d1 f0       	breq	.+52     	; 0x1376 <DIO_Pullup_Port+0x62>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <DIO_Pullup_Port+0x42>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	61 f0       	breq	.+24     	; 0x136c <DIO_Pullup_Port+0x58>
    1354:	1e c0       	rjmp	.+60     	; 0x1392 <DIO_Pullup_Port+0x7e>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	81 f0       	breq	.+32     	; 0x1380 <DIO_Pullup_Port+0x6c>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	81 f0       	breq	.+32     	; 0x138a <DIO_Pullup_Port+0x76>
    136a:	13 c0       	rjmp	.+38     	; 0x1392 <DIO_Pullup_Port+0x7e>
		{
			case DIO_PORTA:

				PORTA = HIGH_PORT;
    136c:	eb e3       	ldi	r30, 0x3B	; 59
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	80 83       	st	Z, r24
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTB:

				PORTB = HIGH_PORT;
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	80 83       	st	Z, r24
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTC:

				PORTC = HIGH_PORT;
    1380:	e5 e3       	ldi	r30, 0x35	; 53
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	80 83       	st	Z, r24
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <DIO_Pullup_Port+0x7e>
				break;

			case DIO_PORTD:

				PORTD = HIGH_PORT;
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	80 83       	st	Z, r24
				break;
		}
	}
	return Error;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <DIO_Toggle_Pin>:
/* Description! Interface to Toggle the Output value of the pin                        */
/* Input      ! Pin number , Value to set                                			   */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Toggle_Pin(uint8_t au8_PinNumberCpy)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <DIO_Toggle_Pin+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <DIO_Toggle_Pin+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Error = ERROR_NOK;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	8a 83       	std	Y+2, r24	; 0x02

	if( (au8_PinNumberCpy >= DIO_PA0)&&(au8_PinNumberCpy <= DIO_PD7) )
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	80 32       	cpi	r24, 0x20	; 32
    13ba:	08 f0       	brcs	.+2      	; 0x13be <DIO_Toggle_Pin+0x1c>
    13bc:	73 c0       	rjmp	.+230    	; 0x14a4 <DIO_Toggle_Pin+0x102>
	{
		Error = ERROR_OK;
    13be:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t au8_PortNumberCpy = (au8_PinNumberCpy / BITS_PER_REGISTER);
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	86 95       	lsr	r24
    13c4:	86 95       	lsr	r24
    13c6:	86 95       	lsr	r24
    13c8:	89 83       	std	Y+1, r24	; 0x01
		au8_PinNumberCpy %= BITS_PER_REGISTER;
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	87 70       	andi	r24, 0x07	; 7
    13ce:	8b 83       	std	Y+3, r24	; 0x03

		switch(au8_PortNumberCpy)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	41 f1       	breq	.+80     	; 0x1434 <DIO_Toggle_Pin+0x92>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_Toggle_Pin+0x56>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	61 f0       	breq	.+24     	; 0x140e <DIO_Toggle_Pin+0x6c>
    13f6:	56 c0       	rjmp	.+172    	; 0x14a4 <DIO_Toggle_Pin+0x102>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	61 f1       	breq	.+88     	; 0x145a <DIO_Toggle_Pin+0xb8>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	d1 f1       	breq	.+116    	; 0x1480 <DIO_Toggle_Pin+0xde>
    140c:	4b c0       	rjmp	.+150    	; 0x14a4 <DIO_Toggle_Pin+0x102>
		{
			case DIO_PORTA:
				TOGGLE_BIT(PORTA, au8_PinNumberCpy);
    140e:	ab e3       	ldi	r26, 0x3B	; 59
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	eb e3       	ldi	r30, 0x3B	; 59
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	40 81       	ld	r20, Z
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_Toggle_Pin+0x88>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_Toggle_Pin+0x84>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	38 c0       	rjmp	.+112    	; 0x14a4 <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTB:
				TOGGLE_BIT(PORTB, au8_PinNumberCpy);
    1434:	a8 e3       	ldi	r26, 0x38	; 56
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	40 81       	ld	r20, Z
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_Toggle_Pin+0xae>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_Toggle_Pin+0xaa>
    1454:	84 27       	eor	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	25 c0       	rjmp	.+74     	; 0x14a4 <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTC:
				TOGGLE_BIT(PORTC, au8_PinNumberCpy);
    145a:	a5 e3       	ldi	r26, 0x35	; 53
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e3       	ldi	r30, 0x35	; 53
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	40 81       	ld	r20, Z
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_Toggle_Pin+0xd4>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_Toggle_Pin+0xd0>
    147a:	84 27       	eor	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	12 c0       	rjmp	.+36     	; 0x14a4 <DIO_Toggle_Pin+0x102>
				break;

			case DIO_PORTD:
				TOGGLE_BIT(PORTD, au8_PinNumberCpy);
    1480:	a2 e3       	ldi	r26, 0x32	; 50
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	40 81       	ld	r20, Z
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_Toggle_Pin+0xfa>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_Toggle_Pin+0xf6>
    14a0:	84 27       	eor	r24, r20
    14a2:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <DIO_Toggle_Port>:
/* Description! Interface to Toggle the output value of port                           */
/* Input      ! Port number , Desired output value                                     */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
uint8_t DIO_Toggle_Port(uint8_t au8_PortNumberCpy)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <DIO_Toggle_Port+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_Toggle_Port+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Error = ERROR_NOK;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01

	if( (au8_PortNumberCpy >= DIO_PORTA )&&(au8_PortNumberCpy <= DIO_PORTD) )
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <DIO_Toggle_Port+0x1a>
    14ce:	3f c0       	rjmp	.+126    	; 0x154e <DIO_Toggle_Port+0x98>
	{
		Error = ERROR_OK;
    14d0:	19 82       	std	Y+1, r1	; 0x01
		switch(au8_PortNumberCpy)
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3c 83       	std	Y+4, r19	; 0x04
    14da:	2b 83       	std	Y+3, r18	; 0x03
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	e9 f0       	breq	.+58     	; 0x1520 <DIO_Toggle_Port+0x6a>
    14e6:	2b 81       	ldd	r18, Y+3	; 0x03
    14e8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	2c f4       	brge	.+10     	; 0x14fa <DIO_Toggle_Port+0x44>
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	61 f0       	breq	.+24     	; 0x1510 <DIO_Toggle_Port+0x5a>
    14f8:	2a c0       	rjmp	.+84     	; 0x154e <DIO_Toggle_Port+0x98>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	b1 f0       	breq	.+44     	; 0x1530 <DIO_Toggle_Port+0x7a>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	91 05       	cpc	r25, r1
    150c:	c9 f0       	breq	.+50     	; 0x1540 <DIO_Toggle_Port+0x8a>
    150e:	1f c0       	rjmp	.+62     	; 0x154e <DIO_Toggle_Port+0x98>
		{
			case DIO_PORTA:
				TOGGLE_BYTE(PORTA);
    1510:	ab e3       	ldi	r26, 0x3B	; 59
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e3       	ldi	r30, 0x3B	; 59
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	80 95       	com	r24
    151c:	8c 93       	st	X, r24
    151e:	17 c0       	rjmp	.+46     	; 0x154e <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTB:
				TOGGLE_BYTE(PORTB);
    1520:	a8 e3       	ldi	r26, 0x38	; 56
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e8 e3       	ldi	r30, 0x38	; 56
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 95       	com	r24
    152c:	8c 93       	st	X, r24
    152e:	0f c0       	rjmp	.+30     	; 0x154e <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTC:
				TOGGLE_BYTE(PORTC);
    1530:	a5 e3       	ldi	r26, 0x35	; 53
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e3       	ldi	r30, 0x35	; 53
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 95       	com	r24
    153c:	8c 93       	st	X, r24
    153e:	07 c0       	rjmp	.+14     	; 0x154e <DIO_Toggle_Port+0x98>
				break;

			case DIO_PORTD:
				TOGGLE_BYTE(PORTD);
    1540:	a2 e3       	ldi	r26, 0x32	; 50
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e2 e3       	ldi	r30, 0x32	; 50
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	80 95       	com	r24
    154c:	8c 93       	st	X, r24
				break;
		}
	}
	return Error;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <Enable_GlobalInterrupt>:
/* brief!  function that enable the global interrupt                                   */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Enable_GlobalInterrupt(void)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Enable global interrupt
	*/
	SET_BIT(SREG, GI);
    1566:	af e5       	ldi	r26, 0x5F	; 95
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ef e5       	ldi	r30, 0x5F	; 95
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	8c 93       	st	X, r24
}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <Disable_GlobalInterrupt>:
/* brief!  function that disable the global interrupt                                  */
/* param!  void                            			                                   */
/* return! void                                                                        */
/***************************************************************************************/
void Disable_GlobalInterrupt(void)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	/*
	*	Disable global interrupt
	*/
	CLEAR_BIT(SREG, GI);
    1582:	af e5       	ldi	r26, 0x5F	; 95
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ef e5       	ldi	r30, 0x5F	; 95
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 77       	andi	r24, 0x7F	; 127
    158e:	8c 93       	st	X, r24
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <UART_Init>:
/* brief!  UART initialization                                                         */
/* param!  void                                                                        */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t UART_Init(UART_cfg_s *pstr_UART_cfg)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <UART_Init+0x6>
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9b 83       	std	Y+3, r25	; 0x03
    15a4:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */

	error_t au8_DET = ERROR_OK ;
    15a6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != pstr_UART_cfg)
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	9b 81       	ldd	r25, Y+3	; 0x03
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <UART_Init+0x1c>
    15b0:	3e c1       	rjmp	.+636    	; 0x182e <UART_Init+0x298>
	{
		/*
		*	Checking the desired Mode if it's polling or interrupt
		*/
		if(INTERRUPT == pstr_UART_cfg -> u8_Interrupt_Mode)
    15b2:	ea 81       	ldd	r30, Y+2	; 0x02
    15b4:	fb 81       	ldd	r31, Y+3	; 0x03
    15b6:	80 81       	ld	r24, Z
    15b8:	88 23       	and	r24, r24
    15ba:	d1 f4       	brne	.+52     	; 0x15f0 <UART_Init+0x5a>
		{
			Enable_GlobalInterrupt();
    15bc:	0e 94 af 0a 	call	0x155e	; 0x155e <Enable_GlobalInterrupt>

			SET_BIT(UCSRB, RXCIE); /* Enable RX Complete Interrupt */
    15c0:	aa e2       	ldi	r26, 0x2A	; 42
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ea e2       	ldi	r30, 0x2A	; 42
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 68       	ori	r24, 0x80	; 128
    15cc:	8c 93       	st	X, r24
			SET_BIT(UCSRB, TXCIE); /* Enable RT Complete Interrupt */
    15ce:	aa e2       	ldi	r26, 0x2A	; 42
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ea e2       	ldi	r30, 0x2A	; 42
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 64       	ori	r24, 0x40	; 64
    15da:	8c 93       	st	X, r24
			SET_BIT(UCSRB, UDRIE); /* Enable Data Register Empty Interrupt */
    15dc:	aa e2       	ldi	r26, 0x2A	; 42
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ea e2       	ldi	r30, 0x2A	; 42
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 62       	ori	r24, 0x20	; 32
    15e8:	8c 93       	st	X, r24
			u8_UART_InterruptMode = INTERRUPT ;
    15ea:	10 92 68 00 	sts	0x0068, r1
    15ee:	20 c0       	rjmp	.+64     	; 0x1630 <UART_Init+0x9a>
		}
		else if(POLLING == pstr_UART_cfg -> u8_Interrupt_Mode)
    15f0:	ea 81       	ldd	r30, Y+2	; 0x02
    15f2:	fb 81       	ldd	r31, Y+3	; 0x03
    15f4:	80 81       	ld	r24, Z
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	c9 f4       	brne	.+50     	; 0x162c <UART_Init+0x96>
		{
			CLEAR_BIT(UCSRB, RXCIE); /* Disable RX Complete Interrupt */
    15fa:	aa e2       	ldi	r26, 0x2A	; 42
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ea e2       	ldi	r30, 0x2A	; 42
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 77       	andi	r24, 0x7F	; 127
    1606:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, TXCIE); /* Disable RT Complete Interrupt */
    1608:	aa e2       	ldi	r26, 0x2A	; 42
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ea e2       	ldi	r30, 0x2A	; 42
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 7b       	andi	r24, 0xBF	; 191
    1614:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UDRIE); /* Disable Data Register Empty Interrupt */
    1616:	aa e2       	ldi	r26, 0x2A	; 42
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ea e2       	ldi	r30, 0x2A	; 42
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7d       	andi	r24, 0xDF	; 223
    1622:	8c 93       	st	X, r24
			u8_UART_InterruptMode = POLLING ;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 93 68 00 	sts	0x0068, r24
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <UART_Init+0x9a>
		}
		else
		{
			/* Handling of entering wrong Mode */
			au8_DET = E_INTERRUPT_MODE ;
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	89 83       	std	Y+1, r24	; 0x01
		}

		 /*
		  * selects between accessing the UCSRC or the UBRRH Register
		  */
		SET_BIT(UCSRC, URSEL);
    1630:	a0 e4       	ldi	r26, 0x40	; 64
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e0 e4       	ldi	r30, 0x40	; 64
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	8c 93       	st	X, r24

		/* Handling synchronization Mode */
		if(ASYNCHRONOUS == pstr_UART_cfg -> u8_Sync)
    163e:	ea 81       	ldd	r30, Y+2	; 0x02
    1640:	fb 81       	ldd	r31, Y+3	; 0x03
    1642:	81 81       	ldd	r24, Z+1	; 0x01
    1644:	88 23       	and	r24, r24
    1646:	b1 f4       	brne	.+44     	; 0x1674 <UART_Init+0xde>
		{
			/* "Asynchronous" USART Mode Select */
			CLEAR_BIT(UCSRC, UMSEL);
    1648:	a0 e4       	ldi	r26, 0x40	; 64
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e0 e4       	ldi	r30, 0x40	; 64
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7b       	andi	r24, 0xBF	; 191
    1654:	8c 93       	st	X, r24
			if(BAUDRATE_9600 == pstr_UART_cfg -> u16_BaudRate)
    1656:	ea 81       	ldd	r30, Y+2	; 0x02
    1658:	fb 81       	ldd	r31, Y+3	; 0x03
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	83 33       	cpi	r24, 0x33	; 51
    1660:	91 05       	cpc	r25, r1
    1662:	29 f4       	brne	.+10     	; 0x166e <UART_Init+0xd8>
			{
				//UCSRC=0b0....... Lw 3aez ast5dm UBRRH, menf3sh a3mlo b CLEAR_BIT 3san htd5ol t2ra al awl w b3den t3ml clear f htla2y fi al bit '1'
				UBRRL = BAUDRATE_9600;//Baud Rate 9600
    1664:	e9 e2       	ldi	r30, 0x29	; 41
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	83 e3       	ldi	r24, 0x33	; 51
    166a:	80 83       	st	Z, r24
    166c:	12 c0       	rjmp	.+36     	; 0x1692 <UART_Init+0xfc>
			}
			else
			{
				/* Handling of entering wrong BaudRate */
				au8_DET = E_BAUDRATE ;
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <UART_Init+0xfc>
			}

		}
		else if(SYNCHRONOUS == pstr_UART_cfg -> u8_Sync)
    1674:	ea 81       	ldd	r30, Y+2	; 0x02
    1676:	fb 81       	ldd	r31, Y+3	; 0x03
    1678:	81 81       	ldd	r24, Z+1	; 0x01
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	41 f4       	brne	.+16     	; 0x168e <UART_Init+0xf8>
		{
			/* "Synchronous" USART Mode Select */
			SET_BIT(UCSRC, UMSEL);
    167e:	a0 e4       	ldi	r26, 0x40	; 64
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e0 e4       	ldi	r30, 0x40	; 64
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 64       	ori	r24, 0x40	; 64
    168a:	8c 93       	st	X, r24
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <UART_Init+0xfc>
			 */
		}
		else
		{
			/* Handling of entering wrong synchronization Mode */
			au8_DET = E_SYNC ;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
		}

		/*
		 * Parity Mode
		 */
		if(Disabled_PARITY == pstr_UART_cfg -> u8_Parity)
    1692:	ea 81       	ldd	r30, Y+2	; 0x02
    1694:	fb 81       	ldd	r31, Y+3	; 0x03
    1696:	85 81       	ldd	r24, Z+5	; 0x05
    1698:	88 23       	and	r24, r24
    169a:	79 f4       	brne	.+30     	; 0x16ba <UART_Init+0x124>
		{
			CLEAR_BIT(UCSRC, UPM1);
    169c:	a0 e4       	ldi	r26, 0x40	; 64
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e0 e4       	ldi	r30, 0x40	; 64
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 7d       	andi	r24, 0xDF	; 223
    16a8:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UPM0);
    16aa:	a0 e4       	ldi	r26, 0x40	; 64
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e0 e4       	ldi	r30, 0x40	; 64
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7e       	andi	r24, 0xEF	; 239
    16b6:	8c 93       	st	X, r24
    16b8:	2a c0       	rjmp	.+84     	; 0x170e <UART_Init+0x178>
		}
		else if(Disabled_PARITY == pstr_UART_cfg -> u8_Parity)
    16ba:	ea 81       	ldd	r30, Y+2	; 0x02
    16bc:	fb 81       	ldd	r31, Y+3	; 0x03
    16be:	85 81       	ldd	r24, Z+5	; 0x05
    16c0:	88 23       	and	r24, r24
    16c2:	79 f4       	brne	.+30     	; 0x16e2 <UART_Init+0x14c>
		{
			CLEAR_BIT(UCSRC, UPM1);
    16c4:	a0 e4       	ldi	r26, 0x40	; 64
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e0 e4       	ldi	r30, 0x40	; 64
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 7d       	andi	r24, 0xDF	; 223
    16d0:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UPM0);
    16d2:	a0 e4       	ldi	r26, 0x40	; 64
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e0 e4       	ldi	r30, 0x40	; 64
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	8c 93       	st	X, r24
    16e0:	16 c0       	rjmp	.+44     	; 0x170e <UART_Init+0x178>
		}
		else if(Disabled_PARITY == pstr_UART_cfg -> u8_Parity)
    16e2:	ea 81       	ldd	r30, Y+2	; 0x02
    16e4:	fb 81       	ldd	r31, Y+3	; 0x03
    16e6:	85 81       	ldd	r24, Z+5	; 0x05
    16e8:	88 23       	and	r24, r24
    16ea:	79 f4       	brne	.+30     	; 0x170a <UART_Init+0x174>
		{
			SET_BIT(UCSRC, UPM1);
    16ec:	a0 e4       	ldi	r26, 0x40	; 64
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e0 e4       	ldi	r30, 0x40	; 64
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 62       	ori	r24, 0x20	; 32
    16f8:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UPM0);
    16fa:	a0 e4       	ldi	r26, 0x40	; 64
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e0 e4       	ldi	r30, 0x40	; 64
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 61       	ori	r24, 0x10	; 16
    1706:	8c 93       	st	X, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <UART_Init+0x178>
		}
		else
		{
			/* Handling of entering wrong Parity */
			au8_DET = E_PARITY ;
    170a:	86 e0       	ldi	r24, 0x06	; 6
    170c:	89 83       	std	Y+1, r24	; 0x01
		}

		/*
		 *  Stop Bit Select
		 */
		if(STOP_1B == pstr_UART_cfg -> u8_StopSize)
    170e:	ea 81       	ldd	r30, Y+2	; 0x02
    1710:	fb 81       	ldd	r31, Y+3	; 0x03
    1712:	86 81       	ldd	r24, Z+6	; 0x06
    1714:	88 23       	and	r24, r24
    1716:	41 f4       	brne	.+16     	; 0x1728 <UART_Init+0x192>
		{
			CLEAR_BIT(UCSRC, USBS); /* One Stop Bit */
    1718:	a0 e4       	ldi	r26, 0x40	; 64
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e0 e4       	ldi	r30, 0x40	; 64
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	87 7f       	andi	r24, 0xF7	; 247
    1724:	8c 93       	st	X, r24
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <UART_Init+0x1b0>
		}
		else if((STOP_2B == pstr_UART_cfg -> u8_StopSize))
    1728:	ea 81       	ldd	r30, Y+2	; 0x02
    172a:	fb 81       	ldd	r31, Y+3	; 0x03
    172c:	86 81       	ldd	r24, Z+6	; 0x06
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	41 f4       	brne	.+16     	; 0x1742 <UART_Init+0x1ac>
		{
			SET_BIT(UCSRC, USBS); /* Two Stop Bit */
    1732:	a0 e4       	ldi	r26, 0x40	; 64
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e0 e4       	ldi	r30, 0x40	; 64
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	88 60       	ori	r24, 0x08	; 8
    173e:	8c 93       	st	X, r24
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <UART_Init+0x1b0>
		}
		else
		{
			/* Handling of entering wrong Stop size */
			au8_DET = E_STOP_SIZE ;
    1742:	87 e0       	ldi	r24, 0x07	; 7
    1744:	89 83       	std	Y+1, r24	; 0x01
		}

		if(CHAR_5B == pstr_UART_cfg -> u8_CharSize)
    1746:	ea 81       	ldd	r30, Y+2	; 0x02
    1748:	fb 81       	ldd	r31, Y+3	; 0x03
    174a:	84 81       	ldd	r24, Z+4	; 0x04
    174c:	88 23       	and	r24, r24
    174e:	71 f4       	brne	.+28     	; 0x176c <UART_Init+0x1d6>
		{
			/* Character Size */
			SET_MASK(UCSRC, CHAR_5B);
    1750:	a0 e4       	ldi	r26, 0x40	; 64
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e0 e4       	ldi	r30, 0x40	; 64
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    175c:	aa e2       	ldi	r26, 0x2A	; 42
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ea e2       	ldi	r30, 0x2A	; 42
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8b 7f       	andi	r24, 0xFB	; 251
    1768:	8c 93       	st	X, r24
    176a:	52 c0       	rjmp	.+164    	; 0x1810 <UART_Init+0x27a>
		}
		else if(CHAR_6B == pstr_UART_cfg -> u8_CharSize)
    176c:	ea 81       	ldd	r30, Y+2	; 0x02
    176e:	fb 81       	ldd	r31, Y+3	; 0x03
    1770:	84 81       	ldd	r24, Z+4	; 0x04
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	79 f4       	brne	.+30     	; 0x1794 <UART_Init+0x1fe>
		{
			/* Character Size */
			SET_MASK(UCSRC, CHAR_6B);
    1776:	a0 e4       	ldi	r26, 0x40	; 64
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e0 e4       	ldi	r30, 0x40	; 64
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    1784:	aa e2       	ldi	r26, 0x2A	; 42
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	ea e2       	ldi	r30, 0x2A	; 42
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8b 7f       	andi	r24, 0xFB	; 251
    1790:	8c 93       	st	X, r24
    1792:	3e c0       	rjmp	.+124    	; 0x1810 <UART_Init+0x27a>
		}
		else if(CHAR_7B == pstr_UART_cfg -> u8_CharSize)
    1794:	ea 81       	ldd	r30, Y+2	; 0x02
    1796:	fb 81       	ldd	r31, Y+3	; 0x03
    1798:	84 81       	ldd	r24, Z+4	; 0x04
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	79 f4       	brne	.+30     	; 0x17bc <UART_Init+0x226>
		{
			/* Character Size */
			SET_MASK(UCSRC, CHAR_7B);
    179e:	a0 e4       	ldi	r26, 0x40	; 64
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e0 e4       	ldi	r30, 0x40	; 64
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	84 60       	ori	r24, 0x04	; 4
    17aa:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    17ac:	aa e2       	ldi	r26, 0x2A	; 42
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ea e2       	ldi	r30, 0x2A	; 42
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8b 7f       	andi	r24, 0xFB	; 251
    17b8:	8c 93       	st	X, r24
    17ba:	2a c0       	rjmp	.+84     	; 0x1810 <UART_Init+0x27a>
		}
		else if(CHAR_8B == pstr_UART_cfg -> u8_CharSize)
    17bc:	ea 81       	ldd	r30, Y+2	; 0x02
    17be:	fb 81       	ldd	r31, Y+3	; 0x03
    17c0:	84 81       	ldd	r24, Z+4	; 0x04
    17c2:	86 30       	cpi	r24, 0x06	; 6
    17c4:	79 f4       	brne	.+30     	; 0x17e4 <UART_Init+0x24e>
		{
			/* Character Size */
			SET_MASK(UCSRC, CHAR_8B);
    17c6:	a0 e4       	ldi	r26, 0x40	; 64
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e0 e4       	ldi	r30, 0x40	; 64
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	86 60       	ori	r24, 0x06	; 6
    17d2:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB, UCSZ2);
    17d4:	aa e2       	ldi	r26, 0x2A	; 42
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ea e2       	ldi	r30, 0x2A	; 42
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8b 7f       	andi	r24, 0xFB	; 251
    17e0:	8c 93       	st	X, r24
    17e2:	16 c0       	rjmp	.+44     	; 0x1810 <UART_Init+0x27a>
		}
		else if(CHAR_9B == pstr_UART_cfg -> u8_CharSize)
    17e4:	ea 81       	ldd	r30, Y+2	; 0x02
    17e6:	fb 81       	ldd	r31, Y+3	; 0x03
    17e8:	84 81       	ldd	r24, Z+4	; 0x04
    17ea:	87 30       	cpi	r24, 0x07	; 7
    17ec:	79 f4       	brne	.+30     	; 0x180c <UART_Init+0x276>
		{
			/* Character Size */
			SET_MASK(UCSRC, CHAR_8B);
    17ee:	a0 e4       	ldi	r26, 0x40	; 64
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e0 e4       	ldi	r30, 0x40	; 64
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	86 60       	ori	r24, 0x06	; 6
    17fa:	8c 93       	st	X, r24
			SET_BIT(UCSRB, UCSZ2);
    17fc:	aa e2       	ldi	r26, 0x2A	; 42
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ea e2       	ldi	r30, 0x2A	; 42
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	84 60       	ori	r24, 0x04	; 4
    1808:	8c 93       	st	X, r24
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <UART_Init+0x27a>
		}
		else
		{
			/* Handling of entering wrong Char size */
			au8_DET = E_CHAR_SIZE ;
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	89 83       	std	Y+1, r24	; 0x01
		}
		SET_BIT(UCSRB, RXEN); /* RX enable */
    1810:	aa e2       	ldi	r26, 0x2A	; 42
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ea e2       	ldi	r30, 0x2A	; 42
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 61       	ori	r24, 0x10	; 16
    181c:	8c 93       	st	X, r24
		SET_BIT(UCSRB, TXEN); /* TX enable */
    181e:	aa e2       	ldi	r26, 0x2A	; 42
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ea e2       	ldi	r30, 0x2A	; 42
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	88 60       	ori	r24, 0x08	; 8
    182a:	8c 93       	st	X, r24
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <UART_Init+0x29c>
	}
	else
	{
		/* Handling of entering null pointer*/
		au8_DET = E_PTR_IS_NULL ;
    182e:	85 e0       	ldi	r24, 0x05	; 5
    1830:	89 83       	std	Y+1, r24	; 0x01
	}
	return au8_DET;
    1832:	89 81       	ldd	r24, Y+1	; 0x01
}
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <UART_Start_SendByte>:
/* brief!  UART Send Data                                                              */
/* param!  (I/P) Data                                                                  */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t UART_Start_SendByte(uint8_t au8_TXbyatCpy)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <UART_Start_SendByte+0x6>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    184c:	19 82       	std	Y+1, r1	; 0x01
	if(POLLING == u8_UART_InterruptMode)
    184e:	80 91 68 00 	lds	r24, 0x0068
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	89 f4       	brne	.+34     	; 0x1878 <UART_Start_SendByte+0x38>
	{
		while(GET_BIT(UCSRA, UDRE) == NULL);
    1856:	eb e2       	ldi	r30, 0x2B	; 43
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	82 95       	swap	r24
    185e:	86 95       	lsr	r24
    1860:	87 70       	andi	r24, 0x07	; 7
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	90 70       	andi	r25, 0x00	; 0
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	a1 f3       	breq	.-24     	; 0x1856 <UART_Start_SendByte+0x16>
		UDR = au8_TXbyatCpy;
    186e:	ec e2       	ldi	r30, 0x2C	; 44
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	80 83       	st	Z, r24
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <UART_Start_SendByte+0x60>
	}
	else if(INTERRUPT == u8_UART_InterruptMode)
    1878:	80 91 68 00 	lds	r24, 0x0068
    187c:	88 23       	and	r24, r24
    187e:	71 f4       	brne	.+28     	; 0x189c <UART_Start_SendByte+0x5c>
	{
		if(FLAG_IS_SET == u8_UART_TX_Flag)
    1880:	80 91 6a 00 	lds	r24, 0x006A
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	61 f4       	brne	.+24     	; 0x18a0 <UART_Start_SendByte+0x60>
		{
			Disable_GlobalInterrupt();
    1888:	0e 94 bd 0a 	call	0x157a	; 0x157a <Disable_GlobalInterrupt>

			u8_UART_Wrire_Buffer = au8_TXbyatCpy;
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 93 6d 00 	sts	0x006D, r24
			u8_UART_TX_Flag = FLAG_IS_CLEAR;
    1892:	10 92 6a 00 	sts	0x006A, r1

			Enable_GlobalInterrupt();
    1896:	0e 94 af 0a 	call	0x155e	; 0x155e <Enable_GlobalInterrupt>
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <UART_Start_SendByte+0x60>
		}
	}
	else
	{
		/* Handling of entering wrong Mode */
		au8_DET = E_INTERRUPT_MODE ;
    189c:	84 e0       	ldi	r24, 0x04	; 4
    189e:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_DET;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <UART_Start_RecieveByte>:
/* brief!  UART Recive Data                                                            */
/* param!  (O/P) pointer to data                                                       */
/* return! u8 Indication of the execution if it fails or not                           */
/***************************************************************************************/
error_t UART_Start_RecieveByte(uint8_t * au8_RXbyatCpy)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <UART_Start_RecieveByte+0x6>
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	9b 83       	std	Y+3, r25	; 0x03
    18ba:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *	Development Error Tracer
	 */
	error_t au8_DET = ERROR_OK ;
    18bc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL != au8_RXbyatCpy)
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	39 f1       	breq	.+78     	; 0x1914 <UART_Start_RecieveByte+0x68>
	{
		if(POLLING == u8_UART_InterruptMode)
    18c6:	80 91 68 00 	lds	r24, 0x0068
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	61 f4       	brne	.+24     	; 0x18e6 <UART_Start_RecieveByte+0x3a>
		{
			while(GET_BIT(UCSRA, RXC) == NULL);
    18ce:	eb e2       	ldi	r30, 0x2B	; 43
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	88 23       	and	r24, r24
    18d6:	dc f7       	brge	.-10     	; 0x18ce <UART_Start_RecieveByte+0x22>
			*au8_RXbyatCpy = UDR;
    18d8:	ec e2       	ldi	r30, 0x2C	; 44
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	ea 81       	ldd	r30, Y+2	; 0x02
    18e0:	fb 81       	ldd	r31, Y+3	; 0x03
    18e2:	80 83       	st	Z, r24
    18e4:	19 c0       	rjmp	.+50     	; 0x1918 <UART_Start_RecieveByte+0x6c>
		}
		else if(INTERRUPT == u8_UART_InterruptMode)
    18e6:	80 91 68 00 	lds	r24, 0x0068
    18ea:	88 23       	and	r24, r24
    18ec:	81 f4       	brne	.+32     	; 0x190e <UART_Start_RecieveByte+0x62>
		{
			if(FLAG_IS_SET == u8_UART_RX_Flag)
    18ee:	80 91 6b 00 	lds	r24, 0x006B
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	89 f4       	brne	.+34     	; 0x1918 <UART_Start_RecieveByte+0x6c>
			{
				Disable_GlobalInterrupt();
    18f6:	0e 94 bd 0a 	call	0x157a	; 0x157a <Disable_GlobalInterrupt>

				*au8_RXbyatCpy = u8_UART_Read_Buffer;
    18fa:	80 91 6c 00 	lds	r24, 0x006C
    18fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1900:	fb 81       	ldd	r31, Y+3	; 0x03
    1902:	80 83       	st	Z, r24
				u8_UART_RX_Flag = FLAG_IS_CLEAR;
    1904:	10 92 6b 00 	sts	0x006B, r1

				Enable_GlobalInterrupt();
    1908:	0e 94 af 0a 	call	0x155e	; 0x155e <Enable_GlobalInterrupt>
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <UART_Start_RecieveByte+0x6c>
			}
		}
		else
		{
			/* Handling of entering wrong Mode */
			au8_DET = E_INTERRUPT_MODE ;
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <UART_Start_RecieveByte+0x6c>

	}
	else
	{
		/* Handling of entering null pointer*/
		au8_DET = E_PTR_IS_NULL ;
    1914:	85 e0       	ldi	r24, 0x05	; 5
    1916:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_DET;
    1918:	89 81       	ldd	r24, Y+1	; 0x01

}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <__vector_13>:


ISR(USART_RXC_vect)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	8f 93       	push	r24
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62

	u8_UART_RX_Flag = FLAG_IS_SET;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	80 93 6b 00 	sts	0x006B, r24
	u8_UART_Read_Buffer = UDR ;
    1944:	ec e2       	ldi	r30, 0x2C	; 44
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	80 93 6c 00 	sts	0x006C, r24

}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	8f 91       	pop	r24
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <main>:
#include "UART_interface.h"
#include <util/delay.h>


int main(void)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	a5 97       	sbiw	r28, 0x25	; 37
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
	UART_cfg_s Cfg;
	Cfg.u16_BaudRate = BAUDRATE_9600;
    1976:	83 e3       	ldi	r24, 0x33	; 51
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	98 a3       	std	Y+32, r25	; 0x20
    197c:	8f 8f       	std	Y+31, r24	; 0x1f
	Cfg.u8_CharSize  = CHAR_8B;
    197e:	86 e0       	ldi	r24, 0x06	; 6
    1980:	89 a3       	std	Y+33, r24	; 0x21
	Cfg.u8_Interrupt_Mode = POLLING;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	8d 8f       	std	Y+29, r24	; 0x1d
	//Cfg.u8_Interrupt_Mode = INTERRUPT;
	Cfg.u8_Parity = Disabled_PARITY;
    1986:	1a a2       	std	Y+34, r1	; 0x22
	Cfg.u8_SpeedMode = NORMAL_SPEED;
    1988:	1c a2       	std	Y+36, r1	; 0x24
	Cfg.u8_StopSize = STOP_1B;
    198a:	1b a2       	std	Y+35, r1	; 0x23
	Cfg.u8_Sync = ASYNCHRONOUS;
    198c:	1e 8e       	std	Y+30, r1	; 0x1e


	UART_Init(&Cfg);
    198e:	ce 01       	movw	r24, r28
    1990:	4d 96       	adiw	r24, 0x1d	; 29
    1992:	0e 94 cb 0a 	call	0x1596	; 0x1596 <UART_Init>

	DIO_INIT_Pin(DIO_PB4, OUTPUT_PIN);
    1996:	8c e0       	ldi	r24, 0x0C	; 12
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_INIT_Pin>
	DIO_INIT_Pin(DIO_PB5, OUTPUT_PIN);
    199e:	8d e0       	ldi	r24, 0x0D	; 13
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_INIT_Pin>
	DIO_INIT_Pin(DIO_PB6, OUTPUT_PIN);
    19a6:	8e e0       	ldi	r24, 0x0E	; 14
    19a8:	61 e0       	ldi	r22, 0x01	; 1
    19aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_INIT_Pin>
	DIO_INIT_Pin(DIO_PB7, OUTPUT_PIN);
    19ae:	8f e0       	ldi	r24, 0x0F	; 15
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_INIT_Pin>

	DIO_Write_Pin(DIO_PB4, LOW_PIN);
    19b6:	8c e0       	ldi	r24, 0x0C	; 12
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
	DIO_Write_Pin(DIO_PB5, LOW_PIN);
    19be:	8d e0       	ldi	r24, 0x0D	; 13
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
	DIO_Write_Pin(DIO_PB6, LOW_PIN);
    19c6:	8e e0       	ldi	r24, 0x0E	; 14
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
	DIO_Write_Pin(DIO_PB7, LOW_PIN);
    19ce:	8f e0       	ldi	r24, 0x0F	; 15
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
	uint8_t Data;

	while (1)
	{

		UART_Start_RecieveByte(&Data);
    19d6:	ce 01       	movw	r24, r28
    19d8:	85 96       	adiw	r24, 0x25	; 37
    19da:	0e 94 56 0c 	call	0x18ac	; 0x18ac <UART_Start_RecieveByte>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	aa e7       	ldi	r26, 0x7A	; 122
    19e4:	b4 e4       	ldi	r27, 0x44	; 68
    19e6:	89 8f       	std	Y+25, r24	; 0x19
    19e8:	9a 8f       	std	Y+26, r25	; 0x1a
    19ea:	ab 8f       	std	Y+27, r26	; 0x1b
    19ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ee:	69 8d       	ldd	r22, Y+25	; 0x19
    19f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a ef       	ldi	r20, 0xFA	; 250
    19fc:	54 e4       	ldi	r21, 0x44	; 68
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	8d 8b       	std	Y+21, r24	; 0x15
    1a08:	9e 8b       	std	Y+22, r25	; 0x16
    1a0a:	af 8b       	std	Y+23, r26	; 0x17
    1a0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a10:	7e 89       	ldd	r23, Y+22	; 0x16
    1a12:	8f 89       	ldd	r24, Y+23	; 0x17
    1a14:	98 8d       	ldd	r25, Y+24	; 0x18
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <main+0xce>
		__ticks = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 8b       	std	Y+20, r25	; 0x14
    1a2c:	8b 8b       	std	Y+19, r24	; 0x13
    1a2e:	3f c0       	rjmp	.+126    	; 0x1aae <main+0x14c>
	else if (__tmp > 65535)
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	57 e4       	ldi	r21, 0x47	; 71
    1a40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	4c f5       	brge	.+82     	; 0x1a9a <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a48:	69 8d       	ldd	r22, Y+25	; 0x19
    1a4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <main+0x12e>
    1a72:	88 ec       	ldi	r24, 0xC8	; 200
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9a 8b       	std	Y+18, r25	; 0x12
    1a78:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a7a:	89 89       	ldd	r24, Y+17	; 0x11
    1a7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <main+0x11c>
    1a82:	9a 8b       	std	Y+18, r25	; 0x12
    1a84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	9c 8b       	std	Y+20, r25	; 0x14
    1a8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a90:	8b 89       	ldd	r24, Y+19	; 0x13
    1a92:	9c 89       	ldd	r25, Y+20	; 0x14
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <main+0x110>
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9c 8b       	std	Y+20, r25	; 0x14
    1aac:	8b 8b       	std	Y+19, r24	; 0x13
    1aae:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab2:	98 8b       	std	Y+16, r25	; 0x10
    1ab4:	8f 87       	std	Y+15, r24	; 0x0f
    1ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab8:	98 89       	ldd	r25, Y+16	; 0x10
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <main+0x158>
    1abe:	98 8b       	std	Y+16, r25	; 0x10
    1ac0:	8f 87       	std	Y+15, r24	; 0x0f
		 _delay_ms(1000);

		 if(Data == 0X11)
    1ac2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac4:	81 31       	cpi	r24, 0x11	; 17
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <main+0x168>
    1ac8:	93 c0       	rjmp	.+294    	; 0x1bf0 <main+0x28e>
		 {
			 DIO_Write_Pin(DIO_PB4, HIGH_PIN);
    1aca:	8c e0       	ldi	r24, 0x0C	; 12
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
			 DIO_Write_Pin(DIO_PB5, HIGH_PIN);
    1ad2:	8d e0       	ldi	r24, 0x0D	; 13
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
			 DIO_Write_Pin(DIO_PB6, HIGH_PIN);
    1ada:	8e e0       	ldi	r24, 0x0E	; 14
    1adc:	61 e0       	ldi	r22, 0x01	; 1
    1ade:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
			 DIO_Write_Pin(DIO_PB7, HIGH_PIN);
    1ae2:	8f e0       	ldi	r24, 0x0F	; 15
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	aa e7       	ldi	r26, 0x7A	; 122
    1af0:	b4 e4       	ldi	r27, 0x44	; 68
    1af2:	8b 87       	std	Y+11, r24	; 0x0b
    1af4:	9c 87       	std	Y+12, r25	; 0x0c
    1af6:	ad 87       	std	Y+13, r26	; 0x0d
    1af8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	4a ef       	ldi	r20, 0xFA	; 250
    1b08:	54 e4       	ldi	r21, 0x44	; 68
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	8f 83       	std	Y+7, r24	; 0x07
    1b14:	98 87       	std	Y+8, r25	; 0x08
    1b16:	a9 87       	std	Y+9, r26	; 0x09
    1b18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1c:	78 85       	ldd	r23, Y+8	; 0x08
    1b1e:	89 85       	ldd	r24, Y+9	; 0x09
    1b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e8       	ldi	r20, 0x80	; 128
    1b28:	5f e3       	ldi	r21, 0x3F	; 63
    1b2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2e:	88 23       	and	r24, r24
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <main+0x1da>
		__ticks = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9e 83       	std	Y+6, r25	; 0x06
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	3f c0       	rjmp	.+126    	; 0x1bba <main+0x258>
	else if (__tmp > 65535)
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	57 e4       	ldi	r21, 0x47	; 71
    1b4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	4c f5       	brge	.+82     	; 0x1ba6 <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <main+0x23a>
    1b7e:	88 ec       	ldi	r24, 0xC8	; 200
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9c 83       	std	Y+4, r25	; 0x04
    1b84:	8b 83       	std	Y+3, r24	; 0x03
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <main+0x228>
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	69 f7       	brne	.-38     	; 0x1b7e <main+0x21c>
    1ba4:	14 c0       	rjmp	.+40     	; 0x1bce <main+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba8:	78 85       	ldd	r23, Y+8	; 0x08
    1baa:	89 85       	ldd	r24, Y+9	; 0x09
    1bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <main+0x264>
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(1000);
			 DIO_Write_Pin(DIO_PB4, LOW_PIN);
    1bce:	8c e0       	ldi	r24, 0x0C	; 12
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
			 DIO_Write_Pin(DIO_PB5, LOW_PIN);
    1bd6:	8d e0       	ldi	r24, 0x0D	; 13
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
			 DIO_Write_Pin(DIO_PB6, LOW_PIN);
    1bde:	8e e0       	ldi	r24, 0x0E	; 14
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
			 DIO_Write_Pin(DIO_PB7, LOW_PIN);
    1be6:	8f e0       	ldi	r24, 0x0F	; 15
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
    1bee:	f3 ce       	rjmp	.-538    	; 0x19d6 <main+0x74>
		 }
		 else
		 {
			 DIO_Write_Pin(DIO_PA5, LOW_PIN);
    1bf0:	85 e0       	ldi	r24, 0x05	; 5
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_Write_Pin>
    1bf8:	ee ce       	rjmp	.-548    	; 0x19d6 <main+0x74>

00001bfa <__prologue_saves__>:
    1bfa:	2f 92       	push	r2
    1bfc:	3f 92       	push	r3
    1bfe:	4f 92       	push	r4
    1c00:	5f 92       	push	r5
    1c02:	6f 92       	push	r6
    1c04:	7f 92       	push	r7
    1c06:	8f 92       	push	r8
    1c08:	9f 92       	push	r9
    1c0a:	af 92       	push	r10
    1c0c:	bf 92       	push	r11
    1c0e:	cf 92       	push	r12
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	ca 1b       	sub	r28, r26
    1c24:	db 0b       	sbc	r29, r27
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	09 94       	ijmp

00001c32 <__epilogue_restores__>:
    1c32:	2a 88       	ldd	r2, Y+18	; 0x12
    1c34:	39 88       	ldd	r3, Y+17	; 0x11
    1c36:	48 88       	ldd	r4, Y+16	; 0x10
    1c38:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c40:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c42:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c44:	b9 84       	ldd	r11, Y+9	; 0x09
    1c46:	c8 84       	ldd	r12, Y+8	; 0x08
    1c48:	df 80       	ldd	r13, Y+7	; 0x07
    1c4a:	ee 80       	ldd	r14, Y+6	; 0x06
    1c4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4e:	0c 81       	ldd	r16, Y+4	; 0x04
    1c50:	1b 81       	ldd	r17, Y+3	; 0x03
    1c52:	aa 81       	ldd	r26, Y+2	; 0x02
    1c54:	b9 81       	ldd	r27, Y+1	; 0x01
    1c56:	ce 0f       	add	r28, r30
    1c58:	d1 1d       	adc	r29, r1
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	ed 01       	movw	r28, r26
    1c66:	08 95       	ret

00001c68 <_exit>:
    1c68:	f8 94       	cli

00001c6a <__stop_program>:
    1c6a:	ff cf       	rjmp	.-2      	; 0x1c6a <__stop_program>
